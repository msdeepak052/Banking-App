I am building a real-time DevOps CI/CD project and need a sample three-tier banking application with the following directory structure:

banking-app/
├── web/
│   ├── index.html
│   ├── login.html
│   └── styles.css
├── app/
│   ├── app.py
│   ├── requirements.txt
│   └── templates/
│       ├── dashboard.html
│       └── transactions.html
├── db/
│   └── init.sql
├── Dockerfile
├── docker-compose.yml
└── README.md

Please generate all the required files with the following conditions:
🔹 Functionality Requirements

    The app must simulate a banking portal (like HDFC/ICICI net banking).

    User should be able to log in with credentials stored in the MSSQL database.

    After login, user should be redirected to a dashboard with options to:

        View balance

        Make dummy transactions

        See a transaction history statement

🔹 Technology Stack

    Web Tier: HTML/CSS/JS (static frontend)

    App Tier: Python Flask backend (app.py) handling login, session, transactions

    DB Tier: Microsoft SQL Server with pre-seeded user and transaction tables (init.sql)

🔹 Deployment and DevOps Requirements

    All three tiers should be Dockerized

    A working docker-compose.yml to run the full app locally

    A Dockerfile to package the application layer

    The app must be Kubernetes-ready (you may provide Kubernetes YAMLs if needed later)

    User credentials should be stored in MSSQL and queried from the app

    Transactions and balances should be saved and retrieved from MSSQL

    Use environment variables for DB connections, but provide fallback values for local testing

🔹 What to Include

For each file listed in the structure:

    Provide the full code

    Include brief explanations about what each file does

    Keep things simple and beginner-friendly but production-realistic

The final result should be a working banking demo app, ready to:

    Run via Docker Compose

    Be extended into Kubernetes

    Support future CI/CD implementation
ChatGPT said:

Great! Here's a complete and beginner-friendly three-tier banking application structure that meets all your criteria.
🔧 Directory Structure Overview

banking-app/
├── web/
│   ├── index.html
│   ├── login.html
│   └── styles.css
├── app/
│   ├── app.py
│   ├── requirements.txt
│   └── templates/
│       ├── dashboard.html
│       └── transactions.html
├── db/
│   └── init.sql
├── Dockerfile
├── docker-compose.yml
└── README.md

✅ web/index.html

<!-- web/index.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to Deepak Bank</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h1>Welcome to Deepak Bank</h1>
    <a href="login.html">Login</a>
</body>
</html>

Explanation: Simple landing page with a link to the login page.
✅ web/login.html

<!-- web/login.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Login - Deepak Bank</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <h2>Login</h2>
    <form method="POST" action="http://localhost:5000/login">
        <label>Username:</label><input name="username" required><br>
        <label>Password:</label><input type="password" name="password" required><br>
        <button type="submit">Login</button>
    </form>
</body>
</html>

Explanation: Sends login credentials to Flask backend.
✅ web/styles.css

/* web/styles.css */
body {
    font-family: Arial, sans-serif;
    text-align: center;
    padding: 30px;
}
input, button {
    margin: 10px;
    padding: 10px;
}

Explanation: Simple styling for the pages.
✅ app/app.py

from flask import Flask, request, session, redirect, url_for, render_template
import pyodbc
import os

app = Flask(__name__)
app.secret_key = 'supersecretkey'

# Database connection using environment variables
DB_SERVER = os.getenv('DB_SERVER', 'localhost')
DB_NAME = os.getenv('DB_NAME', 'BankDB')
DB_USER = os.getenv('DB_USER', 'sa')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'YourStrong!Passw0rd')

conn_str = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={DB_SERVER};DATABASE={DB_NAME};UID={DB_USER};PWD={DB_PASSWORD}'

def get_db_connection():
    return pyodbc.connect(conn_str)

@app.route('/')
def home():
    return redirect('/login')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
        user = cursor.fetchone()
        conn.close()
        if user:
            session['user'] = username
            return redirect('/dashboard')
        else:
            return "Invalid credentials", 401
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'user' not in session:
        return redirect('/login')
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT balance FROM users WHERE username=?", (session['user'],))
    balance = cursor.fetchone()[0]
    conn.close()
    return render_template('dashboard.html', user=session['user'], balance=balance)

@app.route('/transactions', methods=['GET', 'POST'])
def transactions():
    if 'user' not in session:
        return redirect('/login')
    conn = get_db_connection()
    cursor = conn.cursor()
    if request.method == 'POST':
        amount = float(request.form['amount'])
        cursor.execute("INSERT INTO transactions (username, amount) VALUES (?, ?)", (session['user'], amount))
        cursor.execute("UPDATE users SET balance = balance + ? WHERE username = ?", (amount, session['user']))
        conn.commit()
    cursor.execute("SELECT * FROM transactions WHERE username=? ORDER BY id DESC", (session['user'],))
    txs = cursor.fetchall()
    conn.close()
    return render_template('transactions.html', transactions=txs)

@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect('/login')

if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)

Explanation: Flask app handling login, dashboard, transactions, session management, MSSQL connectivity.
✅ app/templates/dashboard.html

<!DOCTYPE html>
<html>
<head><title>Dashboard</title></head>
<body>
    <h2>Welcome {{ user }}</h2>
    <p>Your balance: ₹{{ balance }}</p>
    <a href="/transactions">Make a transaction</a><br>
    <a href="/logout">Logout</a>
</body>
</html>

✅ app/templates/transactions.html

<!DOCTYPE html>
<html>
<head><title>Transactions</title></head>
<body>
    <h2>Transactions for {{ session['user'] }}</h2>
    <form method="POST">
        <label>Amount:</label><input name="amount" type="number" step="0.01" required>
        <button type="submit">Submit</button>
    </form>
    <ul>
        {% for tx in transactions %}
        <li>ID: {{ tx.id }}, Amount: ₹{{ tx.amount }}</li>
        {% endfor %}
    </ul>
    <a href="/dashboard">Back to Dashboard</a>
</body>
</html>

✅ app/requirements.txt

flask
pyodbc

✅ db/init.sql

-- db/init.sql
CREATE DATABASE BankDB;
GO
USE BankDB;
GO
CREATE TABLE users (
    id INT PRIMARY KEY IDENTITY,
    username VARCHAR(50),
    password VARCHAR(50),
    balance FLOAT
);
INSERT INTO users (username, password, balance) VALUES ('deepak', 'password123', 10000.00);

CREATE TABLE transactions (
    id INT PRIMARY KEY IDENTITY,
    username VARCHAR(50),
    amount FLOAT,
    timestamp DATETIME DEFAULT GETDATE()
);

Explanation: MSSQL schema with dummy user and transaction table.
✅ Dockerfile

# Dockerfile
FROM python:3.9-slim
WORKDIR /app
COPY app/ /app
RUN pip install -r requirements.txt
CMD ["python", "app.py"]

Explanation: Builds the Python Flask application image.
✅ docker-compose.yml

version: '3.8'
services:
  web:
    image: nginx:alpine
    volumes:
      - ./web:/usr/share/nginx/html:ro
    ports:
      - "8080:80"

  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - DB_SERVER=db
      - DB_NAME=BankDB
      - DB_USER=sa
      - DB_PASSWORD=YourStrong!Passw0rd
    depends_on:
      - db

  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      SA_PASSWORD: "YourStrong!Passw0rd"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "sqlcmd -U sa -P YourStrong!Passw0rd -Q 'SELECT 1'"]
      interval: 10s
      retries: 10

volumes:
  mssql_data:

✅ README.md

# 💳 Deepak Bank - Three-Tier Demo App

This is a simple banking demo app with:
- 🌐 Frontend (HTML/CSS/JS) served via Nginx
- 🐍 Python Flask backend
- 🛢️ Microsoft SQL Server backend

## 🏗️ Running the App

```bash
docker-compose up --build

Access:

    Web frontend: http://localhost:8080

    Backend: http://localhost:5000

    DB: MSSQL at port 1433

Login:

    Username: deepak

    Password: password123

🔒 Features

    Login with MSSQL-stored credentials

    View balance

    Perform dummy transactions

    View transaction history

📦 CI/CD Ready

    Dockerized

    Extensible to Kubernetes (YAMLs can be added)


---

Would you like me to also generate the Kubernetes manifests next?

You said:
yes
ChatGPT said:

Here are the Kubernetes YAML manifests to deploy your three-tier banking-app project.
📁 Directory Structure for Kubernetes

We'll assume you organize the Kubernetes files under a k8s/ folder:

banking-app/
└── k8s/
    ├── web-deployment.yaml
    ├── app-deployment.yaml
    ├── db-deployment.yaml
    ├── web-service.yaml
    ├── app-service.yaml
    ├── db-service.yaml
    ├── configmap.yaml
    └── secret.yaml

🔐 k8s/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: mssql-secret
type: Opaque
data:
  SA_PASSWORD: WW91clN0cm9uZyFQYXNzdzByZA==  # base64 of "YourStrong!Passw0rd"

⚙️ k8s/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  DB_SERVER: db-service
  DB_NAME: BankDB
  DB_USER: sa

🛢️ k8s/db-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: mssql
          image: mcr.microsoft.com/mssql/server:2019-latest
          ports:
            - containerPort: 1433
          env:
            - name: ACCEPT_EULA
              value: "Y"
            - name: SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql-secret
                  key: SA_PASSWORD
          volumeMounts:
            - name: mssql-persistent-storage
              mountPath: /var/opt/mssql
      volumes:
        - name: mssql-persistent-storage
          emptyDir: {}

🛢️ k8s/db-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app: db
  ports:
    - port: 1433
      targetPort: 1433
  clusterIP: None

🐍 k8s/app-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: banking-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: banking-app
  template:
    metadata:
      labels:
        app: banking-app
    spec:
      containers:
        - name: app
          image: your-dockerhub-username/banking-app:latest
          ports:
            - containerPort: 5000
          envFrom:
            - configMapRef:
                name: app-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql-secret
                  key: SA_PASSWORD

    Replace your-dockerhub-username/banking-app:latest with your actual Docker image name.

🐍 k8s/app-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: app-service
spec:
  selector:
    app: banking-app
  ports:
    - port: 5000
      targetPort: 5000
  type: ClusterIP

🌐 k8s/web-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: web-content
              mountPath: /usr/share/nginx/html
      volumes:
        - name: web-content
          hostPath:
            path: /absolute/path/to/your/web  # replace with the actual path

    For Minikube or production, consider using a ConfigMap or persistent volume instead of hostPath.

🌐 k8s/web-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  selector:
    app: web
  ports:
    - port: 80
      targetPort: 80
  type: LoadBalancer

🚀 How to Deploy in Kubernetes (Minikube Example)

kubectl apply -f k8s/

If you're using Minikube:

minikube service web-service

Would you like a CI/CD pipeline (GitHub Actions or Jenkins) to automate build and deployment next?
You said:
Gve Jenkinsfile
ChatGPT said:

Here's a production-ready Jenkinsfile to build, test, and deploy your three-tier banking-app using Docker and Kubernetes:
✅ Jenkinsfile

pipeline {
    agent any

    environment {
        IMAGE_NAME = "your-dockerhub-username/banking-app"
        DOCKER_CREDENTIALS_ID = "dockerhub-credentials"      // Jenkins credential ID
        KUBE_CONFIG_CREDENTIALS_ID = "kubeconfig"            // Jenkins secret file ID
        K8S_MANIFEST_DIR = "k8s"
    }

    stages {

        stage('Checkout') {
            steps {
                git url: 'https://github.com/your-repo/banking-app.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${BUILD_NUMBER}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        sh """
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${IMAGE_NAME}:latest
                            docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                            docker push ${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: "${KUBE_CONFIG_CREDENTIALS_ID}", variable: 'KUBECONFIG')]) {
                    script {
                        sh """
                            export KUBECONFIG=${KUBECONFIG}
                            kubectl apply -f ${K8S_MANIFEST_DIR}/configmap.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/secret.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/db-deployment.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/db-service.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/app-deployment.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/app-service.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/web-deployment.yaml
                            kubectl apply -f ${K8S_MANIFEST_DIR}/web-service.yaml
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment completed successfully!"
        }
        failure {
            echo "❌ Deployment failed."
        }
    }
}

🛠️ Jenkins Setup Notes:

    Add Docker Hub credentials in Jenkins (dockerhub-credentials) with username/password.

    Add Kubeconfig as a secret file (kubeconfig) in Jenkins credentials.

    Use an agent/node with Docker and kubectl installed.
